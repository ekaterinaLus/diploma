// <auto-generated />
using System;
using DiplomaBU.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataStore.Migrations
{
    [DbContext(typeof(BusinessUniversityContext))]
    partial class BusinessUniversityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DataStore.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress")
                        .IsRequired();

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DataStore.Entities.EventsTags", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("TagsId");

                    b.HasKey("EventId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventsTags");
                });

            modelBuilder.Entity("DataStore.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Annotation");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Header")
                        .IsRequired();

                    b.Property<int?>("SectionId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("DataStore.Entities.NewsTags", b =>
                {
                    b.Property<int>("NewsId");

                    b.Property<int>("TagsId");

                    b.HasKey("NewsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("NewsTags");
                });

            modelBuilder.Entity("DataStore.Entities.NewsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("NewsTypes");
                });

            modelBuilder.Entity("DataStore.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<DateTime?>("Finish");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Start");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DataStore.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EventId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DataStore.Entities.EventsTags", b =>
                {
                    b.HasOne("DataStore.Entities.Event", "Events")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataStore.Entities.Tag", "Tags")
                        .WithMany("Events")
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataStore.Entities.News", b =>
                {
                    b.HasOne("DataStore.Entities.NewsType", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("DataStore.Entities.NewsTags", b =>
                {
                    b.HasOne("DataStore.Entities.News", "News")
                        .WithMany("Tags")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataStore.Entities.Tag", "Tags")
                        .WithMany("News")
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataStore.Entities.Tag", b =>
                {
                    b.HasOne("DataStore.Entities.Event")
                        .WithMany("Tags")
                        .HasForeignKey("EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
